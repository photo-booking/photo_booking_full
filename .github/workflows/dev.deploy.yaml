name: Build and Deploy backend and frontend

on: 
  repository_dispatch:
    types: [pull_request_closed_develop]

defaults:
  run:
    working-directory: .

jobs:
  update_submodules:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with: 
          token: ${{ secrets.DISPATCH_HOOK_TOKEN }}
          submodules: true

      - name: Pull & update submodules recursively
        run: |
          git submodule update --init --recursive
          git submodule update --recursive --remote

      - name: Commit
        run: |
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions - update submodules"
          git add --all
          git commit -m "Update submodules" || echo "No changes to commit"
          git push

  build_and_push_to_docker_hub:
    name: Build and Push backend and frontend Docker images to DockerHub
    runs-on: ubuntu-latest
    needs: update_submodules
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Backend Build and Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./backend@a739d40/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/photo_market_backend_dev:latest

      # - name: Backend Build and Push to DockerHub
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: ./frontend
      #     push: true
      #     tags: ${{ secrets.DOCKER_USERNAME }}/photo_market_frontend_dev:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    - name: Copy docker-compose.yml via ssh
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: "dev.docker-compose.yml"
        target: "photo_market_dev"
    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          cd photo_market_dev
          sudo docker image prune -f
          sudo docker compose -f dev.docker-compose.yml pull
          sudo docker compose -f dev.docker-compose.yml down
          touch .env
          echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
          echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
          echo DB_NAME=${{ secrets.DB_NAME }} >> .env
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env
          echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
          echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
          echo DEBUG=True
          sudo docker compose -f docker-compose.production.yml up -d
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic --no-input
