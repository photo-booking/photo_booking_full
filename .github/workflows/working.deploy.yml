name: Photo-market deploy on server

on:
  repository_dispatch:
    types: [pull_request_closed_develop]
  schedule:
    - cron: '00 0,14 * * *'
  workflow_dispatch:


defaults:
  run:
    working-directory: .

jobs:
  update_submodules:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout submodules
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
          token: ${{ secrets.DISPATCH_HOOK_TOKEN }}
          submodules: true

      - name: Update submodules content
        run: git submodule update --init --recursive --checkout --remote
      #   run: git submodule update --remote --recursive
      # - name: Pull the content
      #   run: git pull --recurse-submodules
      - name: Update submodules index
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Update submodule

  build_backend_and_push_to_docker_hub:
    name: Build and Push backend Docker images to DockerHub
    runs-on: ubuntu-latest
    needs: update_submodules
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
          submodules: recursive
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Backend Build and Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/photo_market_backend_dev:latest

  build_frontend_and_push_to_dockerhub:
    name: Build and push frontend images to DokerHub
    runs-on: ubuntu-latest
    needs: update_submodules
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
          submodules: recursive
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Frontend Build and Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/photo_market_frontend_dev:latest

  build_nginx_and_push_to_dockerhub:
    name: Build and push gateway image to DokerHub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
          submodules: recursive
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Nginx Build and Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./nginx
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/photo_market_nginx_dev:latest

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build_backend_and_push_to_docker_hub
      - build_frontend_and_push_to_dockerhub
      - build_nginx_and_push_to_dockerhub
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    - name: Copy docker-compose.yml via ssh
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: "docker-compose.production.yml"
        target: "/root/photo_market_dev"
    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          cd /root/photo_market_dev
          sudo docker image prune -f
          sudo docker compose -f docker-compose.production.yml pull
          sudo docker compose -f docker-compose.production.yml down
          rm .env
          touch .env
          echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
          echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
          echo DB_NAME=${{ secrets.DB_NAME }} >> .env
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env
          echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
          echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
          echo DEBUG=True >> .env
          echo VK_APP_ID=${{ secrets.VK_APP_ID}} >> .env
          echo VK_API_SECRET=${{ secrets.VK_API_SECRET }} >> .env
          echo GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} >> .env
          echo GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} >> .env
          echo EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }} >> .env
          echo EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }} >> .env
          sudo docker compose -f docker-compose.production.yml up -d
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic --no-input
          sudo docker compose -f docker-compose.production.yml exec backend cp -r /app/static/. /backend_static/static/
