name: Build and Deploy backend and frontend

# on: 
#   repository_dispatch:
#     types: [pull_request_closed_develop]
on:
  workflow_dispatch

defaults:
  run:
    working-directory: .

jobs:
  update_submodules:
    runs-on: ubuntu-latest

    steps:
      - name: Clone submodules
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.DISPATCH_HOOK_TOKEN }}
          submodules: true

      - name: Update submodules content
        run: git submodule update --remote --recursive  
      - name: Pull the content
        run: git pull
      - name: Update submodules index
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Update submodule

  build_and_push_to_docker_hub:
    name: Build and Push backend and frontend Docker images to DockerHub
    runs-on: ubuntu-latest
    needs: update_submodules
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Backend Build and Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/photo_market_backend_dev:latest

      # - name: Frontend Build and Push to DockerHub
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: ./frontend
      #     push: true
      #     tags: ${{ secrets.DOCKER_USERNAME }}/photo_market_frontend_dev:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    - name: Copy docker-compose.yml via ssh
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: "dev.docker-compose.yml"
        target: "photo_market_dev"
    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          cd photo_market_dev
          sudo docker image prune -f
          sudo docker compose -f dev.docker-compose.yml pull
          sudo docker compose -f dev.docker-compose.yml down
          touch .env
          echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
          echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
          echo DB_NAME=${{ secrets.DB_NAME }} >> .env
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env
          echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
          echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
          echo DEBUG=True >> .env
          sudo docker compose -f dev.docker-compose.yml up -d
          sudo docker compose -f dev.docker-compose.yml exec backend python manage.py migrate
          sudo docker compose -f dev.docker-compose.yml exec backend python manage.py collectstatic --no-input
